FORMAT: 1A
HOST: http://dbandgui.wspurgin.me/

# DB and GUI

DB and GUI is a simple API allowing Students to ask questions
and answer them, as well as seeing the questions other students
have answered.

# Group Questions

## Questions Collection [/questions]

### List All Questions [GET]

Know that `publisher_id` represents the student who published the question id.

+ Response 200 (application/json)

        [
            {
                "id": 1
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "publisher_id": 12354
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]


### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2
    
    + Body
    
            {
                "id": 2
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "publisher_id": 98765432
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }
            
## Question [/questions/{question_id}{?choices}]

+ Parameters
    + question_id: `2` (number, required) - The identifier of the question
    + choices: `true` (boolean, optional) - Logical to indicate if choices are returned
        + Default: `true`

### View Question Details [GET]

When the parameter `chioces` is `false` then the choices attribute will
be an empty array.

+ Response 200

        {
            "id": 2
            "question": "Favourite programming language?",
            "published_at": "2015-08-05T08:40:51.620Z",
            "publisher_id": 98765432
            "choices": [
                {
                    "choice": "Swift",
                    "votes": 0
                }, {
                    "choice": "Python",
                    "votes": 0
                }, {
                    "choice": "Objective-C",
                    "votes": 0
                }, {
                    "choice": "Ruby",
                    "votes": 0
                }
            ]
        }
+ Request choices=false
    + Parameter
        + choices: `false`

+ Response 200

        {
            "id": 2
            "question": "Favourite programming language?",
            "published_at": "2015-08-05T08:40:51.620Z",
            "publisher_id": 98765432,
            "choices": []
        }


# Group Students

## Students Collection [/students]

### List All Students [GET]

+ Response 200 (application/json)

        [
            {
                "id": 12345678,
                "name": "John Doe",
                "classes": [
                    {
                        "name": "Data Structures",
                        "id": 15
                    },
                    {
                        "name": "Underwater Basket Weaving"
                        "id": 50
                    }
                ]
            },
            {
                "id": 87654321,
                "name": "Jane Buck",
                "classes": []
            }
        ]

## Student [/student/{student_id}]

+ Parameters
    + student_id: `12345678` (number, required) - ID of the student as an integer

### View Student Details [GET]

+ Response 200 (application/json)

        {
            "id": 12345678,
            "name": "John Doe",
            "classes": [
                {
                    "name": "Data Structures",
                    "id": 15
                },
                {
                    "name": "Underwater Basket Weaving"
                    "id": 50
                }
            ]
        }
        
+ Response 404 (text/plain)


### Update Student Details [PUT]

Update fields on a specific student. Note that the id for
student is in the URL.

+ Request (application/json)

        {
            "name": "Jacob Jingleheimer",
            "classes": [
                {
                    "name": "JSON for Dummies",
                    "id": 99
                }
            ]
        }

+ Response 200 (application/json)

    + Headers

            Location: /student/9
    
    + Body
    
            {
                "id": 9,
                "name": "Jacob Jingleheimer",
                "classes": [
                    {
                        "name": "JSON for Dummies",
                        "id": 99
                    }
                ]
            }


# Group Authentication

## Sessions [/sessions]

### Create New Sesssion [POST]

Authenticate a user (log in)

+ Request

    + Headers
    
            Authorization: Basic YXdlc29tZTphdXRoCg==

+ Response 302 (text/plain)

    + Headers
    
            Location:http://dbandgui.wspurgin.me/
            Set-Cookie:request_method=POST; path=/
            Set-Cookie:_dbandgui_session=really-long-hashed-session-id; path=/; HttpOnly
            Transfer-Encoding:chunked
            X-Content-Type-Options:nosniff
            X-Frame-Options:SAMEORIGIN
            X-XSS-Protection:1; mode=block
        
+ Response 401 (text/plain)

        
### Delete Session [DELETE]

Log out a user

+ Response 302 (text/plain)

    + Headers
    
            Location:http://dbandgui.wspurgin.me/
            Set-Cookie:request_method=DELETE; path=/
            Set-Cookie:_dbandgui_session=long-hashed-guest-session-id; path=/; HttpOnly
            Transfer-Encoding:chunked
            X-Content-Type-Options:nosniff
            X-Frame-Options:SAMEORIGIN
            X-XSS-Protection:1; mode=block